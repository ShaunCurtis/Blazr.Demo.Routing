@implements IDisposable
@namespace Blazr.Demo.Routing.UI

@if (this.isLoading)
{
    <div class="m-2 p-2">Loading...</div>
}
else
{
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in this._viewService.Records)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                        <td><button class="btn btn-danger" @onclick="() => DeleteRecord(forecast.Id)">Delete</button></td>
                    </tr>
                }
            </tbody>
        </table>
}

@code {
    [Inject] private WeatherForecastViewService? _viewService { get; set; }

    private bool isLoading => _viewService!.Records is null;

    protected override void OnInitialized()
        => this._viewService!.ListChanged += this.OnListChanged;

    private async Task DeleteRecord(Guid Id)
        => await this._viewService!.DeleteRecord(Id);

    private void OnListChanged(object? sender, EventArgs e)
        => this.InvokeAsync(this.StateHasChanged);

    public void Dispose()
        => this._viewService!.ListChanged -= this.OnListChanged;
}
